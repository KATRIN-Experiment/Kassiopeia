<!-- This is how you set the outputfile for the KSSerializationProcessor -->
<serialization file="serialization_config_output.xml"/>
<!-- it will write the complete configuration to the specified file, with all variables resolved, loops enrolled, etc.
Tags are left there so the outputfile can be processed by Kassiopeia again. If no filename is given the output is written to "output_config.xml" -->


<!-- in this way you can define global variables valid across files -->
<global_define name="main_color" value="lilac"/>
<global_define name="secondary_color" value="ultramarine"/>

<!-- in this way you define variables valid only in the current file -->
<define name="array_one" value="234"/>
<define name="array_two" value="583"/>

<!-- use square braces [] to refer to variable names -->
<test_element color="red" hash="[array_one]"/>

<!-- you can refer to variable names in the data area of elements as well as in attributes -->
<main_color_element> [main_color] </main_color_element>

<!-- you can nest curly braces to make complicated variable names -->
<define name="index" value="one"/>
<test_element color="green" hash="[array_[index]]"/>

<!-- you can undefine local variables like this... -->
<undefine name="index"/>


<!-- which lets you redefine them again later if you want -->
<define name="index" value="two"/>
<test_element color="blue" hash="[array_[index]]"/>
<undefine name="index"/>

<!-- you can also undefine global elements, but be careful doing this since they persist across files -->
<global_undefine name="main_color"/>

<!-- you can also set a defaut value for a variable, which is used if the variable is not defined -->
<!-- Syntax: [variablename:defaultvalue]-->

<test_element name="random" value="[seed:12345]"/>
<define name="seed" value="6789"/>
<test_element name="random" value="[seed:12345]"/>
