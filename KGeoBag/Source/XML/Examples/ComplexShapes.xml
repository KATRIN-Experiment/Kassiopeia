<geometry>

    <!-- Important note: for these examples to work correctly Kommon and KGeoBag -->
    <!-- must be compiled against ROOT in order to make use TFormula in the xml -->
    <!-- If not these objects will not be built correctly resulting in a crash -->

    <!-- complex surfaces -->

    <port_housing_surface name="example_port_housing_surface">
        <port_housing x1="0." y1="0." z1="-1." x2="0." y2="0." z2="1." radius="0.4" longitudinal_mesh_count="50" axial_mesh_count="50">
            <circular_port x="1.5" y="1.5" z="-.3" radius="0.33"/>
            <rectangular_port x="0." y="1." z=".3" length="0.3" width=".15"/>
            <circular_port x="-1./sqrt(2.)" y="-1./sqrt(2.)" z="-.5" radius="0.053"/>
        </port_housing>
    </port_housing_surface>

    <conic_section_port_housing_surface name="example_conic_section_port_housing_surface">
      <conic_section_port_housing r1="2.75" z1="-1.79675" r2="0.25" z2="-0.067" longitudinal_mesh_count="100" axial_mesh_count="100">
	<define name="offset" value="2."/>
	<define name="nPorts" value="6"/>
	<loop variable="i" start="0" end="{[nPorts]-1}" step="1">
	  <if condition="{([i] mod 2) eq 0}">
	    <orthogonal_port x="{[offset]*TMath::Cos(2.*TMath::Pi()*[i]/[nPorts])}" y="{[offset]*TMath::Sin(2.*TMath::Pi()*[i]/[nPorts])}" z=".5" radius="{.05 + .05*([i]+1)}"/>
	  </if>
	  <if condition="{([i] mod 2) eq 1}">
	    <paraxial_port x="{[offset]*TMath::Cos(2.*TMath::Pi()*[i]/[nPorts])}" y="{[offset]*TMath::Sin(2.*TMath::Pi()*[i]/[nPorts])}" z=".5" radius="{.05 + .05*([i]+1)}"/>
	  </if>
	</loop>
      </conic_section_port_housing>
    </conic_section_port_housing_surface>

    <beam_surface name="example_beam_surface">
      <beam longitudinal_mesh_count="20" axial_mesh_count="20">
	<define name="poly" value="50"/>
	<define name="radius" value=".5"/>
	<define name="z_start_max" value="-.25"/>
	<define name="z_start_min" value="-.75"/>
	<define name="z_end_max" value=".75"/>
	<define name="z_end_min" value=".25"/>
	<loop variable="i" start="0" end="[poly]" step="1">
	  <start_line x1="{[radius]*TMath::Cos(2.*TMath::Pi()*[i]/[poly])}" y1="{[radius]*TMath::Sin(2.*TMath::Pi()*[i]/[poly])}" z1="{([z_start_max]+[z_start_min])*.5 + ([z_start_max]-[z_start_min])*TMath::Cos(2.*TMath::Pi()*[i]/[poly])}" x2="{[radius]*TMath::Cos(2.*TMath::Pi()*(([i]+1) mod [poly])/[poly])}" y2="{[radius]*TMath::Sin(2.*TMath::Pi()*(([i]+1) mod [poly])/[poly])}" z2="{([z_start_max]+[z_start_min])*.5 + ([z_start_max]-[z_start_min])*TMath::Cos(2.*TMath::Pi()*(([i]+1) mod [poly])/[poly])}"/>
	  <end_line x1="{[radius]*TMath::Cos(2.*TMath::Pi()*[i]/[poly])}" y1="{[radius]*TMath::Sin(2.*TMath::Pi()*[i]/[poly])}" z1="{([z_end_max]+[z_end_min])*.5 + ([z_end_max]-[z_end_min])*TMath::Cos(2.*TMath::Pi()*[i]/[poly])}" x2="{[radius]*TMath::Cos(2.*TMath::Pi()*(([i]+1) mod [poly])/[poly])}" y2="{[radius]*TMath::Sin(2.*TMath::Pi()*(([i]+1) mod [poly])/[poly])}" z2="{([z_end_max]+[z_end_min])*.5 + ([z_end_max]-[z_end_min])*TMath::Cos(2.*TMath::Pi()*(([i]+1) mod [poly])/[poly])}"/>
	</loop>
        </beam>
    </beam_surface>

    <beam_surface name="example_multicut_surface">
		<beam longitudinal_mesh_count="60" axial_mesh_count="60">
			<define name="z_start" value="-1."/>
			<define name="z_end" value="1."/>
			<define name="radius_start" value="2."/>
			<define name="radius_end" value="1."/>
			<define name="theta_start" value="-10."/>
			<define name="theta_end" value="30."/>
			<define name="mesh" value="100"/>
			<loop variable="i" start="0" end="[mesh]" step="1">
				<start_line x1="{[radius_start]*cos(2.*TMath::Pi()*[i]/[mesh])}" y1="{[radius_start]*cos([theta_start]/180.*TMath::Pi())*sin(2.*TMath::Pi()*[i]/[mesh])}" z1="{[radius_start]*sin([theta_start]/180.*TMath::Pi())*sin(2.*TMath::Pi()*[i]/[mesh])+[z_start]}" x2="{[radius_start]*cos(2.*TMath::Pi()*(([i]+1) mod [mesh])/[mesh])}" y2="{[radius_start]*cos([theta_start]/180.*TMath::Pi())*sin(2.*TMath::Pi()*(([i]+1) mod [mesh])/[mesh])}" z2="{[radius_start]*sin([theta_start]/180.*TMath::Pi())*sin(2.*TMath::Pi()*(([i]+1) mod [mesh])/[mesh])+[z_start]}"/>
				<end_line x1="{[radius_end]*cos(2.*TMath::Pi()*[i]/[mesh])}" y1="{[radius_end]*cos([theta_end]/180.*TMath::Pi())*sin(2.*TMath::Pi()*[i]/[mesh])}" z1="{[radius_end]*sin([theta_end]/180.*TMath::Pi())*sin(2.*TMath::Pi()*[i]/[mesh])+[z_end]}" x2="{[radius_end]*cos(2.*TMath::Pi()*(([i]+1) mod [mesh])/[mesh])}" y2="{[radius_end]*cos([theta_end]/180.*TMath::Pi())*sin(2.*TMath::Pi()*(([i]+1) mod [mesh])/[mesh])}" z2="{[radius_end]*sin([theta_end]/180.*TMath::Pi())*sin(2.*TMath::Pi()*(([i]+1) mod [mesh])/[mesh])+[z_end]}"/>
			</loop>
		</beam>
	</beam_surface>

    <rod_surface name="example_rod_surface">
      <rod radius="0.2" longitudinal_mesh_count="100" axial_mesh_count="12">
	<define name="n_turns" value="5"/>
	<define name="n_segments_per_turn" value="36"/>
	<define name="coil_radius" value="1."/>
	<define name="height_per_turn" value="1."/>
	<loop variable="i" start="0" end="{[n_turns]*[n_segments_per_turn]}" step="1">
	  <vertex x="{[coil_radius]*TMath::Cos(2.*TMath::Pi()*([i] mod [n_segments_per_turn])/[n_segments_per_turn])}" y="{[coil_radius]*TMath::Sin(2.*TMath::Pi()*([i] mod [n_segments_per_turn])/[n_segments_per_turn])}" z="{[i]*[height_per_turn]/[n_segments_per_turn]}"/>
	</loop>
      </rod>
    </rod_surface>

    <extruded_surface name="example_extruded_surface">
      <extruded_object z_min="-1." z_max="1." longitudinal_mesh_count="40" longitudinal_mesh_power="2." closed_form="1">
	<inner_line x1="-.5" y1="-.5" x2="-.5" y2=".5"/>
	<inner_arc x1="-.5" y1=".5" x2=".5" y2=".5" radius="1." positive_orientation="0"/>
	<inner_arc x1=".5" y1=".5" x2=".5" y2="-.5" radius="1." positive_orientation="1"/>
	<inner_arc x1=".5" y1="-.5" x2="-.5" y2="-.5" radius="1." positive_orientation="0"/>
	<outer_arc x1="-1." y1="-1." x2="-1." y2="1." radius="{TMath::Sqrt(2.)}" positive_orientation="0"/>
	<outer_line x1="-1." y1="1." x2="1." y2="1."/>
	<outer_line x1="1." y1="1." x2="1." y2="-1."/>
	<outer_line x1="1." y1="-1." x2="-1." y2="-1."/>
      </extruded_object>
    </extruded_surface>

    <rotated_surface name="example_rotated_surface">
      <rotated_object longitudinal_mesh_count_start="10" longitudinal_mesh_count_end="20" longitudinal_mesh_power="2.">
	<line z1="-1." r1="0." z2="-1." r2="1.5"/>
	<line z1="-1." r1="1.5" z2="0." r2="1.5"/>
	<line z1="0." r1="1.5" z2="0." r2=".5"/>
	<line z1="0." r1=".5" z2="1." r2=".5"/>
	<arc z1="1." r1=".5" z2="1." r2="1." radius=".5" positive_orientation="0"/>
	<line z1="1." r1="1." z2="2." r2="1."/>
	<arc z1="2." r1="1." z2="0." r2="2." radius="2" positive_orientation="1"/>
      </rotated_object>
    </rotated_surface>

    <linear_wire_grid_surface name="example_linear_wire_grid_surface">
        <linear_wire_grid
            radius="1."
            pitch="0.05"
            diameter="0.01"
            longitudinal_mesh_count="20"
            longitudinal_mesh_power="2"
            add_outer_circle="true">
        </linear_wire_grid>
    </linear_wire_grid_surface>

    <quadratic_wire_grid_surface name="example_quadratic_wire_grid_surface">
        <quadratic_wire_grid
            radius="1."
            pitch="0.05"
            diameter="0.01"
            mesh_count_per_pitch="2"
            add_outer_circle="true">
        </quadratic_wire_grid>
    </quadratic_wire_grid_surface>

    <circle_wire_surface name="example_circle_wire_surface">
        <circle_wire
            radius="1"
            diameter=".005"
            mesh_count="120">
        </circle_wire>
    </circle_wire_surface>

    <circular_wire_pins_surface name="example_circular_wire_pins_surface">
        <circular_wire_pins
            inner_radius="1."
            outer_radius="1.25"
            diameter="0.005"
            n_pins="8"
            rotation_angle="30"
            mesh_count="25"
            mesh_power="2">
        </circular_wire_pins>
    </circular_wire_pins_surface>

    <!-- complex spaces -->

    <port_housing_space name="example_port_housing_space">
        <port_housing x1="0." y1="0." z1="-1." x2="0." y2="0." z2="1." radius="0.4" longitudinal_mesh_count="50" axial_mesh_count="50">
            <circular_port x="1.5" y="1.5" z="-.3" radius="0.33"/>
            <rectangular_port x="0." y="1." z=".3" length="0.3" width=".15"/>
            <circular_port x="-1./sqrt(2.)" y="-1./sqrt(2.)" z="-.5" radius="0.053"/>
        </port_housing>
    </port_housing_space>

    <conic_section_port_housing_space name="example_conic_section_port_housing_space">
      <conic_section_port_housing r1="2.75" z1="-1.79675" r2="0.25" z2="-0.067" longitudinal_mesh_count="100" axial_mesh_count="100">
	<define name="offset_" value="2."/>
	<define name="nPorts_" value="6"/>
	<loop variable="i" start="0" end="{[nPorts_]-1}" step="1">
	  <if condition="{([i] mod 2) eq 0}">
	    <orthogonal_port x="{[offset_]*TMath::Cos(2.*TMath::Pi()*[i]/[nPorts_])}" y="{[offset_]*TMath::Sin(2.*TMath::Pi()*[i]/[nPorts_])}" z=".5" radius="{.05 + .05*([i]+1)}"/>
	  </if>
	  <if condition="{([i] mod 2) eq 1}">
	    <paraxial_port x="{[offset_]*TMath::Cos(2.*TMath::Pi()*[i]/[nPorts_])}" y="{[offset_]*TMath::Sin(2.*TMath::Pi()*[i]/[nPorts_])}" z=".5" radius="{.05 + .05*([i]+1)}"/>
	  </if>
	</loop>
      </conic_section_port_housing>
    </conic_section_port_housing_space>

    <beam_space name="example_beam_space">
      <beam longitudinal_mesh_count="20" axial_mesh_count="20">
	<define name="poly_" value="50"/>
	<define name="radius_" value=".5"/>
	<define name="z_start_max_" value="-.25"/>
	<define name="z_start_min_" value="-.75"/>
	<define name="z_end_max_" value=".75"/>
	<define name="z_end_min_" value=".25"/>
	<loop variable="i" start="0" end="[poly_]" step="1">
	  <start_line x1="{[radius_]*TMath::Cos(2.*TMath::Pi()*[i]/[poly_])}" y1="{[radius_]*TMath::Sin(2.*TMath::Pi()*[i]/[poly_])}" z1="{([z_start_max_]+[z_start_min_])*.5 + ([z_start_max_]-[z_start_min_])*TMath::Cos(2.*TMath::Pi()*[i]/[poly_])}" x2="{[radius_]*TMath::Cos(2.*TMath::Pi()*(([i]+1) mod [poly_])/[poly_])}" y2="{[radius_]*TMath::Sin(2.*TMath::Pi()*(([i]+1) mod [poly_])/[poly_])}" z2="{([z_start_max_]+[z_start_min_])*.5 + ([z_start_max_]-[z_start_min_])*TMath::Cos(2.*TMath::Pi()*(([i]+1) mod [poly_])/[poly_])}"/>
	  <end_line x1="{[radius_]*TMath::Cos(2.*TMath::Pi()*[i]/[poly_])}" y1="{[radius_]*TMath::Sin(2.*TMath::Pi()*[i]/[poly_])}" z1="{([z_end_max_]+[z_end_min_])*.5 + ([z_end_max_]-[z_end_min_])*TMath::Cos(2.*TMath::Pi()*[i]/[poly_])}" x2="{[radius_]*TMath::Cos(2.*TMath::Pi()*(([i]+1) mod [poly_])/[poly_])}" y2="{[radius_]*TMath::Sin(2.*TMath::Pi()*(([i]+1) mod [poly_])/[poly_])}" z2="{([z_end_max_]+[z_end_min_])*.5 + ([z_end_max_]-[z_end_min_])*TMath::Cos(2.*TMath::Pi()*(([i]+1) mod [poly_])/[poly_])}"/>
	</loop>
        </beam>
    </beam_space>

    <rod_space name="example_rod_space">
      <rod radius="0.2" longitudinal_mesh_count="100" axial_mesh_count="12">
	<define name="n_turns_" value="5"/>
	<define name="n_segments_per_turn_" value="36"/>
	<define name="coil_radius_" value="1."/>
	<define name="height_per_turn_" value="1."/>
	<loop variable="i" start="0" end="{[n_turns_]*[n_segments_per_turn_]}" step="1">
	  <vertex x="{[coil_radius_]*TMath::Cos(2.*TMath::Pi()*([i] mod [n_segments_per_turn_])/[n_segments_per_turn_])}" y="{[coil_radius_]*TMath::Sin(2.*TMath::Pi()*([i] mod [n_segments_per_turn_])/[n_segments_per_turn_])}" z="{[i]*[height_per_turn_]/[n_segments_per_turn_]}"/>
	</loop>
      </rod>
    </rod_space>

    <extruded_space name="example_extruded_space">
      <extruded_object z_min="-1." z_max="1." longitudinal_mesh_count="40" longitudinal_mesh_power="2." closed_form="1">
	<inner_line x1="-.5" y1="-.5" x2="-.5" y2=".5"/>
	<inner_arc x1="-.5" y1=".5" x2=".5" y2=".5" radius="1." positive_orientation="0"/>
	<inner_arc x1=".5" y1=".5" x2=".5" y2="-.5" radius="1." positive_orientation="1"/>
	<inner_arc x1=".5" y1="-.5" x2="-.5" y2="-.5" radius="1." positive_orientation="0"/>
	<outer_arc x1="-1." y1="-1." x2="-1." y2="1." radius="{TMath::Sqrt(2.)}" positive_orientation="0"/>
	<outer_line x1="-1." y1="1." x2="1." y2="1."/>
	<outer_line x1="1." y1="1." x2="1." y2="-1."/>
	<outer_line x1="1." y1="-1." x2="-1." y2="-1."/>
      </extruded_object>
    </extruded_space>

    <rotated_space name="example_rotated_space">
      <rotated_object longitudinal_mesh_count_start="10" longitudinal_mesh_count_end="20" longitudinal_mesh_power="2.">
	<line z1="-1." r1="0." z2="-1." r2="1.5"/>
	<line z1="-1." r1="1.5" z2="0." r2="1.5"/>
	<line z1="0." r1="1.5" z2="0." r2=".5"/>
	<line z1="0." r1=".5" z2="1." r2=".5"/>
	<arc z1="1." r1=".5" z2="1." r2="1." radius=".5" positive_orientation="0"/>
	<line z1="1." r1="1." z2="2." r2="1."/>
	<arc z1="2." r1="1." z2="0." r2="2." radius="2" positive_orientation="1"/>
      </rotated_object>
    </rotated_space>

</geometry>
