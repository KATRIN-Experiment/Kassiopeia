/*
 * This file specifies Kasper version information.
 * You can use it to retrieve information or check for a specific version.
 *
 * Note: This file is auto-generated by CMake, any changes will be overwritten!
 */

#include "KasperVersion.h"
#include "KBaseStringUtils.h"

#include <vector>

namespace katrin
{

using std::string;
using std::vector;

string KasperVersion::DateTime()
{
    return string(__DATE__) + "" + string(__TIME__);
}

const static vector<unsigned> sKasperVersionTokens(KBaseStringUtils::SplitTrimAndConvert<unsigned>("@KASPER_VERSION@", "."));

unsigned KasperVersion::Major()
{
    return !sKasperVersionTokens.empty() ? sKasperVersionTokens[0] : 0;
}
unsigned KasperVersion::Minor()
{
    return sKasperVersionTokens.size() > 1 ? sKasperVersionTokens[1] : 0;
}
unsigned KasperVersion::Patch()
{
    return sKasperVersionTokens.size() > 2 ? sKasperVersionTokens[2] : 0;
}

unsigned KasperVersion::AsNumber()
{
    return 10000 * Major() + 100 * Minor() + Patch();
}
string KasperVersion::AsString()
{
    return string("@KASPER_VERSION@");
}

string KasperVersion::GitBranch()
{
    return string("@KASPER_GIT_BRANCH@");
}
string KasperVersion::GitCommit()
{
    return string("@KASPER_GIT_COMMIT@");
}
string KasperVersion::GitRevision()
{
    return GitBranch() + string("+") + GitCommit();
}

string KasperVersion::SystemName()
{
    return string("@CMAKE_SYSTEM_NAME@");
}
string KasperVersion::CompilerId()
{
    return string("@CMAKE_CXX_COMPILER_ID@");
}
string KasperVersion::CompilerVersion()
{
    return string("@CMAKE_CXX_COMPILER_VERSION@");
}

bool KasperVersion::Check(const std::string& other, size_t maxLevel)
{
    auto versionTokens = KBaseStringUtils::SplitTrimAndConvert<unsigned>(other, ".");
    for (size_t i = 0; i < maxLevel; i++) {
        if (sKasperVersionTokens.size() > i && versionTokens.size() > i) {
            if (sKasperVersionTokens[i] != versionTokens[i])
                return false;
        }
    }
    return true;
}

}  // namespace katrin
